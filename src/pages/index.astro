---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar";
import Hero from "../components/Hero";
import Manifest from "../components/Manifest";
import About from "../components/About";
import Project from "../components/Project";
import Skill from "../components/Skill";
import Contact from "../components/Contact";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
---

<Layout title="Emmanuel Isenah | Web Developer">
  <div class="custom-cursor inset-6"></div>
  <div class="container mx-auto px-4 flex justify-center">
    <Navbar client:only="react" />
  </div>
  <div id="" class="container mx-auto px-4 lg:px-12 xl:px-32 overflow-hidden">
    <Hero client:only="react" />
  </div>
  <div class="container mx-auto px-4 lg:px-12 xl:px-32 overflow-hidden">
    <Manifest client:only="react" />
  </div>
  <div class="bg-neutral-100 dark:bg-[#0d0d0d]">
    <div id="about" class="container mx-auto lg:px-12 xl:px-32 overflow-hidden">
      <About client:only="react" />
    </div>
  </div>
  <div
    id="projects"
    class="container mx-auto px-4 lg:px-12 xl:px-32 overflow-hidden"
  >
    <Project client:only="react" />
  </div>
  <div id="skills" class="bg-neutral-100 dark:bg-[#0d0d0d]">
    <div class="container py-24 mx-auto lg:px-12 xl:px-32 overflow-hidden">
      <Skill client:only="react" />
    </div>
  </div>
  <div
    id="contact"
    class="container pt-24 mx-auto px-4 lg:px-12 xl:px-32 overflow-hidden"
  >
    <Contact client:load />
  </div>
  <ToastContainer client:only="react" />
</Layout>

<script>
  const customCursor = document.querySelector(".custom-cursor") as HTMLElement;
  const root = document.querySelector("html") as HTMLElement;
  let cursorX = 0;
  let cursorY = 0;
  let scrollX = window.scrollX || window.pageXOffset;
  let scrollY = window.scrollY || window.pageYOffset;

  const handleCursor = (e: MouseEvent) => {
    cursorX = e.clientX;
    cursorY = e.clientY;
    customCursor.style.top = cursorY + scrollY + "px";
    customCursor.style.left = cursorX + scrollX + "px";
  };

  root.addEventListener("mousemove", handleCursor);

  window.addEventListener("scroll", () => {
    scrollX = window.scrollX || window.pageXOffset;
    scrollY = window.scrollY || window.pageYOffset;
    customCursor.style.top = cursorY + scrollY + "px";
    customCursor.style.left = cursorX + scrollX + "px";
  });

  const handleMouseClick = () => {
    customCursor.classList.contains("mouse-click")
      ? customCursor.classList.remove("mouse-click")
      : customCursor.classList.add("mouse-click");
  };

  window.addEventListener("mousedown", handleMouseClick);
  window.addEventListener("mouseup", handleMouseClick);
</script>

<script>
  const theme = ((): string => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme")!;
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }
  window.localStorage.setItem("theme", theme);
</script>

<script>
  // Get custom cursor
  const customCursor = document.querySelector(".custom-cursor") as HTMLElement;

  // Set the distance from the edge of the screen that the cursor should disappear
  const distanceFromEdgeX = 100;
  const distanceFromEdgeY = 5;

  // Get a reference to the body element
  const body = document.body;

  // Add an event listener to track the mouse movement
  body.addEventListener("mousemove", (e) => {
    // Get the current mouse position
    const mouseX = e.clientX;
    const mouseY = e.clientY;

    // Get the width and height of the body element
    const bodyWidth = window.innerWidth;
    const bodyHeight = window.innerHeight;
    if (window.matchMedia("(min-width: 1280px)").matches) {
      // Check if the mouse is too close to the edge of the screen
      if (
        mouseX < distanceFromEdgeX ||
        mouseX > bodyWidth - distanceFromEdgeX ||
        mouseY < distanceFromEdgeY ||
        mouseY > bodyHeight - distanceFromEdgeY
      ) {
        // Hide the cursor
        customCursor.style.opacity = "0";

        body!.style.cursor = "auto";
      } else {
        // Show the cursor
        customCursor.style.opacity = "100";
        body!.style.cursor = "none ";
      }
    }
  });
</script>
